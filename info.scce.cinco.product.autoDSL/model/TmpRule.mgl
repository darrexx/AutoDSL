@primeviewer
@style("model/TmpRule.style")
graphModel TmpRule {
	package info.scce.cinco.product.autoDSL.tmprule
	nsURI "http://cinco.scce.info/product/tmprule"
	diagramExtension "tmprule"
	
	containableElements(
		Operation[0,*],
		Decision[0,*]
	)
	
	@style(controlFlow)
	edge ControlFlow {
		
	}
	
	@style(dataFlow)
	edge DataFlow {
		
	}
	
	enum PrimitiveType {
		Text
		Number
		Boolean
		Timestamp
	}
	
	enum CarInputType {
		a
		b
		c
	}
	
	enum CarOutputType {
		a
		b
		c
	}

	abstract node Input {
		attr PrimitiveType as datatype
	}
	abstract node Output {
		attr PrimitiveType as datatype
	}
	
	
	@style(carInput, "${inputtype}", "${datatype}")
	@disable(resize)
	@palette("Ports")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CarInputToStaticInput")  //TODO
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CarInputToInputPort") //TODO
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateCarInput") //TODO
	node CarInput extends Input {
		attr CarInputType as inputtype
	}
	
	@style(carOutput, "${outputtype}", "${datatype}")
	@disable(resize)
	@palette("Ports")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateCarOutput") //TODO
	node CarOutput extends Output {
		attr CarOutputType as outputtype
	}
		
	@style(inputPort, "${datatype}")
	@disable(resize)
	@palette("Ports")
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.InputPortToStaticInput") 
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.InputPortToCarInput")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateInputPort") //TODO
	node InputPort extends Input {
		incomingEdges(DataFlow[1,1])
	}
	
	@style(outputPort, "${datatype}")
	@disable(resize)
	@palette("Ports")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateOutputPort") //TODO
	node OutputPort extends Output {
		outgoingEdges(DataFlow[1,*])
	}
	
	@style(staticInput, "${staticValue}", "${datatype}")
	@disable(resize)
	@palette("Ports")
// TODO Static InputToX
// Wie viele StaticInput-Typen gibt es und brauchen wir einen Hook für jeden? 
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.NumberStaticInput") //TODO
	node NumberStaticInput extends Input {
		attr EInt as staticValue
	}
	
	abstract container Operation {
		incomingEdges(ControlFlow[1,*])
		outgoingEdges(ControlFlow[1,1])
	}
	
	abstract container CommutableOperation extends Operation {
		containableElements(Input[0,*], Output[1,1])
	}
	
	abstract container NonCommutableOperation extends Operation {
		containableElements(Input[2,2], Output[1,1])
	}

	@style(commutableOperation, "+")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateAddition") //TODO
	container Addition extends CommutableOperation {
		
	}
	
	@style(commutableOperation, "×")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateMultiplication") //TODO
	container Multiplication extends CommutableOperation {
		
	}

	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateSubtraction")
	@style(nonCommutableOperation, "-")
	container Subtraction extends NonCommutableOperation {
		
	}
	
	@style(nonCommutableOperation, "<")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateLess") //TODO
	container Less extends NonCommutableOperation {
	}
	
	@style(nonCommutableOperation, "≤")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateLessOrEqual") //TODO
	container LessOrEqual extends NonCommutableOperation {
	}
	
	@style(commutableOperation, "max")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateMaximum") //TODO
	container Maximum extends CommutableOperation {
	}
	
	@style(commutableOperation, "min")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateMinimum") //TODO
	container Minimum extends CommutableOperation {
	}
	
	@style(commutableOperation, "∧")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateAND") //TODO
	container LogicalAnd extends CommutableOperation {
	}
	
	@style(commutableOperation, "∨")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateOR") //TODO
	container LogicalOr extends CommutableOperation {
	}
	
	@style(commutableOperation, "¬")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateNegation") //TODO
	container Negation extends Operation {
		containableElements(Input[1,1], Output[1,1])
	}
	
	@style(decision, "?")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateDecision") //TODO
	container Decision {
		incomingEdges(ControlFlow[1,*])
		outgoingEdges(ControlFlow[2,2])
		containableElements(Input[1,1])
	}
}