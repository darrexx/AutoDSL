@primeviewer
@style("model/Rule.style")
@generatable("info.scce.cinco.product.autoDSL.generator.RuleGenerator","/src-gen/")
graphModel Rule {
	package info.scce.cinco.product.autoDSL.rule
	nsURI "http://cinco.scce.info/product/rule"
	diagramExtension "rule"
	
	containableElements(
		Operation[0,*],
		Decision[0,*],
		Comment[0,*],
		OutputNode[0,*],
		BooleanGuardOutput[0,*]
	)
	
	abstract edge ControlFlow {}
	
	@style (controlFlow)
	edge ControlFlowBasic extends ControlFlow {}
	
	@style(labeledControlFlow, "True")
	edge ControlFlowDecisionTrue extends ControlFlow {}
	
	@style(labeledControlFlow, "False")
	edge ControlFlowDecisionFalse extends ControlFlow {}
		
	@style(dataFlow)
	edge BooleanDataFlow {}
	
	@style(dataFlow)
	edge NumberDataFlow {}
	
	enum CarInputTypeBoolean{
		Ruecklicht_An
		Bremse_Kaputt
	}
		
	enum CarInputTypeNumber{
		Geschwindigkeit
		Anzahl_Raeder
	}
	
	enum CarOutputTypeBoolean {
		Scheinwerfer_An
	}
	enum CarOutputTypeNumber {
		Geschwindigkeit
	}
	

	abstract node Input {}
	abstract node BooleanInput extends Input {}
	abstract node NumberInput extends Input {}
	
	abstract node Output {}
	abstract node BooleanOutput extends Output {}
	abstract node NumberOutput extends Output {}
	
	
	@style(carInput, "${inputtype}", "Boolean")
	@icon("icons/CarInput.png")
	@disable(resize)
	@palette("Ports")
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.BooleanCarToStatic")
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.BooleanCarToPort")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateInput")
	@preDelete("info.scce.cinco.product.autoDSL.hooks.PreDeleteInput")
	node BooleanCarInput extends BooleanInput {
		attr CarInputTypeBoolean as inputtype
	}
	
	@style(carInput, "${inputtype}", "Number")
	@icon("icons/CarInput.png")
	@disable(resize)
	@palette("Ports")
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.NumberCarToStatic")
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.NumberCarToPort")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateInput")
	@preDelete("info.scce.cinco.product.autoDSL.hooks.PreDeleteInput")
	node NumberCarInput extends NumberInput {
		attr CarInputTypeNumber as inputtype
	}
	
	@style(carOutput, "${outputtype}", "Boolean")
	@disable(resize)
	@icon("icons/CarOutput.png")
	@palette("Ports")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateBooleanCarOutput") //TODO
	node BooleanCarOutput extends BooleanOutput {
		attr CarOutputTypeBoolean as outputtype
	}
	
	@style(carOutput, "${outputtype}", "Number")
	@disable(resize)
	@icon("icons/CarOutput.png")
	@palette("Ports")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateNumberCarOutput") //TODO
	node NumberCarOutput extends NumberOutput {
		attr CarOutputTypeNumber as outputtype
	}
		
	@style(inputPort, "Number")
	@disable(resize)
	@palette("Ports")
	@icon("icons/inputPort.png")
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.NumberPortToStatic") 
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.NumberPortToCar")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateInput")
	@preDelete("info.scce.cinco.product.autoDSL.hooks.PreDeleteInput")
	node NumberInputPort extends NumberInput {
		incomingEdges(NumberDataFlow[1,1])
	}

	@style(inputPort, "Boolean")
	@disable(resize)
	@palette("Ports")
	@icon("icons/inputPort.png")
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.BooleanPortToStatic") 
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.BooleanPortToCar")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateInput")
	@preDelete("info.scce.cinco.product.autoDSL.hooks.PreDeleteInput")
	node BooleanInputPort extends BooleanInput {
		incomingEdges(BooleanDataFlow[1,1])
	}
	
	@style(outputPort, "Boolean")
	@disable(resize)
	@icon("icons/outputPort.png")
	@palette("Ports")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateOutputPort") //TODO
	node BooleanOutputPort extends BooleanOutput {
		outgoingEdges(BooleanDataFlow[1,*])
	}

	@style(outputPort, "Number")
	@disable(resize)
	@icon("icons/outputPort.png")
	@palette("Ports")
//	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.CreateOutputPort") //TODO
	node NumberOutputPort extends NumberOutput {
		outgoingEdges(NumberDataFlow[1,*])
	}
	
	@style(staticInput, "${staticValue}", "Boolean")
	@disable(resize)
	@palette("Ports")
	@icon("icons/StaticInput.png")
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.BooleanStaticToPort") 
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.BooleanStaticToCar")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateInput")
	@preDelete("info.scce.cinco.product.autoDSL.hooks.PreDeleteInput")
	node BooleanStaticInput extends BooleanInput {
		attr EBoolean as staticValue
	}
	
	@style(staticInput, "${staticValue}", "Number")
	@disable(resize)
	@palette("Ports")
	@icon("icons/StaticInput.png")
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.NumberStaticToPort") 
	@contextMenuAction("info.scce.cinco.product.autoDSL.hooks.NumberStaticToCar")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateInput")
	@preDelete("info.scce.cinco.product.autoDSL.hooks.PreDeleteInput")
	node NumberStaticInput extends NumberInput {
		attr EFloat as staticValue
	}
	
	abstract container Operation {
		incomingEdges(ControlFlow[1,*])
		outgoingEdges(ControlFlowBasic[1,1])
		containableElements(Input[1,*], Output[1,1]) 
	}
   
	abstract container CommutableOperation extends Operation {}
	abstract container NonCommutableOperation extends Operation {} 

	@style(commutableOperation, "+")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateCommutableNumberOp")
	container Addition extends CommutableOperation {
		containableElements(BooleanInput[0,0], NumberInput[1,*], NumberOutput[1,1])
	}
	
	@style(commutableOperation, "×")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateCommutableNumberOp")
	container Multiplication extends CommutableOperation {
		containableElements(BooleanInput[0,0], NumberInput[1,*], NumberOutput[1,1])		
	}

	@style(nonCommutableOperation, "-")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateSubtraction")
	container Subtraction extends NonCommutableOperation {
		containableElements(BooleanInput[0,0], NumberInput[2,2], NumberOutput[1,1])
	}
	
	@style(nonCommutableOperation, "<")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateComparison")
	container Less extends NonCommutableOperation {
		containableElements(BooleanInput[0,0], NumberInput[2,2], BooleanOutput[1,1])
	}
	
	@style(nonCommutableOperation, "≤")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateComparison")
	container LessOrEqual extends NonCommutableOperation {
		containableElements(BooleanInput[0,0], NumberInput[2,2], BooleanOutput[1,1])
	}
	
	@style(commutableOperation, "max")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateCommutableNumberOp")
	container Maximum extends CommutableOperation {
		containableElements(BooleanInput[0,0], NumberInput[1,*], NumberOutput[1,1])
	}
	
	@style(commutableOperation, "min")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateCommutableNumberOp")
	container Minimum extends CommutableOperation {
		containableElements(BooleanInput[0,0], NumberInput[1,*], NumberOutput[1,1])
	}
	
	@style(commutableOperation, "∧")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateCommutableBooleanOp")
	container LogicalAnd extends CommutableOperation {
		containableElements(BooleanInput[1,*], NumberInput[0,0], BooleanOutput[1,1])
	}
	
	@style(commutableOperation, "∨")
	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateCommutableBooleanOp")
	container LogicalOr extends CommutableOperation {
		containableElements(BooleanInput[1,*], NumberInput[0,0], BooleanOutput[1,1])
	}
	
	@style(commutableOperation, "¬")
//	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateUnaryOp")
	container Negation extends Operation {
		containableElements(BooleanInput[1,1], NumberInput[0,0], BooleanOutput[1,1])
	}
	
	@style(decision, "?")
//	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateDecision") //TODO
	container Decision {
		incomingEdges(ControlFlow[1,*])
		outgoingEdges(ControlFlowDecisionFalse[1,1], ControlFlowDecisionTrue[1,1])
		containableElements(BooleanInput[1,1])
	}
	
	@style(comment, "${comment}")
	node Comment {
		@multiLine
		attr EString as comment := ""
	}
	
	abstract container OutputNode {
		incomingEdges(ControlFlow[1,*])
		outgoingEdges(ControlFlowBasic[0,1])
	}
	
	@style(commutableOperation, "Output")
//	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateBooleanOutputNode") //TODO
	container BooleanOutputNode extends OutputNode {
		containableElements(BooleanInput[1,1], BooleanCarOutput[1,*])
	}
	
	@style(commutableOperation, "Output")
//	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateNumberOutputNode") //TODO
	container NumberOutputNode extends OutputNode {
		containableElements(NumberInput[1,1], NumberCarOutput[1,1])
	}
	
	@style(decision, "Guard")
//	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreateBooleanGuardOutput") //TODO
	container BooleanGuardOutput extends OutputNode {
		incomingEdges(ControlFlow[1,*])
		containableElements(BooleanInput[1,1])
	}
	
	@style(pid, "${p}", "${i}","${d}")
//	@postCreate("info.scce.cinco.product.autoDSL.hooks.CreatePIDController") //TODO
	container PIDController extends Operation {
		incomingEdges(ControlFlow[1,*])
		outgoingEdges(ControlFlowBasic[0,1])
		attr EDouble as p
		attr EDouble as i
		attr EDouble as d
		containableElements(BooleanInput[0,0], NumberInput[2,2], NumberOutput[1,1])
	}
}